#include <stdint.h>
#include <modbus/modbus.h>

typedef struct
{
    uint16_t JumpCode;
    uint16_t ForvardReverseRunDisable;
    uint16_t AccelPattern;
    uint16_t DecelPattern;
    uint16_t StopModeSelect;
    uint16_t DCBrakeStartFrequency;
    uint16_t DCBrakeWaitTime;
    uint16_t DCBrakeVoltage;
    uint16_t DCBrakeTime;
    uint16_t DCBrakeStartVoltage;
    uint16_t DCBrakeStartTime;
    uint16_t TimeForMegnatizingAMotor;
    uint16_t JogFrequency;
    uint16_t MaxFrequency;
    uint16_t BaseFrequency;
    uint16_t StartFrequency;
    uint16_t FrequencyHighLowLimit;
    uint16_t FrequencyHighLimit;
    uint16_t FrequencyLowLimit;
    uint16_t TorqueBoostSelect;
    uint16_t TorqueBoostInForvardDirection;
    uint16_t TorqueBoostInReverseDirection;
    uint16_t VFPattern;
    uint16_t UserVFFrequency1;
    uint16_t UserVFVoltage1;
    uint16_t UserVFFrequency2;
    uint16_t UserVFVoltage2;
    uint16_t UserVFFrequency3;
    uint16_t UserVFVoltage3;
    uint16_t UserVFFrequency4;
    uint16_t UserVFVoltage4;
    uint16_t OutputVoltageAdjustments;
    uint16_t EnergySavingLevel;
    uint16_t ElectronicThermalSelect;
    uint16_t ElectronicThermalLevelFor1min;
    uint16_t ElectronicThermalLevelForCont;
    uint16_t MotorCoolingMethod;
    uint16_t OverloadWarningLevel;
    uint16_t OverloadWarningTime;
    uint16_t OverloadTripSelect;
    uint16_t OverloadTripLevel;
    uint16_t OverloadtripTime;
    uint16_t StallPreventionSelect;
    uint16_t StallPreventionLevel;
    uint16_t StallPreventionDurDecVolLimSel;
    uint16_t SaveUpDownFrequencySelect;
    uint16_t SaveUpDownFrequency;
    uint16_t UpDownModeSelect;
    uint16_t UpDownStepFrequency;
    uint16_t DrawnRunModeSelect;
    uint16_t DrawRate;
}F1_t;

F1_t* F1_new();
void F1_ctor(F1_t* F1, int slaveAddress, modbus_t* ctx);
void F1_dtor(F1_t* F1);

void IG5A_F1_Get_JumpCode(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_ForvardReverseRunDisable(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_AccelPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DecelPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_StopModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeStartFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeWaitTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeVoltage(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeStartVoltage(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DCBrakeStartTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_TimeForMegnatizingAMotor(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_JogFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_MaxFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_BaseFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_StartFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_FrequencyHighLowLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_FrequencyHighLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_FrequencyLowLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_TorqueBoostSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_TorqueBoostInForvardDirection(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_TorqueBoostInReverseDirection(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_VFPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFFrequency1(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFVoltage1(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFFrequency2(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFVoltage2(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFFrequency3(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFVoltage3(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFFrequency4(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UserVFVoltage4(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OutputVoltageAdjustments(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_EnergySavingLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_ElectronicThermalSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_ElectronicThermalLevelFor1min(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_ElectronicThermalLevelForCont(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_MotorCoolingMethod(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OverloadWarningLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OverloadWarningTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OverloadTripSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OverloadTripLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_OverloadtripTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_StallPreventionSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_StallPreventionLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_StallPreventionDurDecVolLimSel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_SaveUpDownFrequencySelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_SaveUpDownFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UpDownModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_UpDownStepFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DrawnRunModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Get_DrawRate(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);

void IG5A_F1_Set_JumpCode(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_ForvardReverseRunDisable(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_AccelPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DecelPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_StopModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeStartFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeWaitTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeVoltage(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeStartVoltage(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DCBrakeStartTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_TimeForMegnatizingAMotor(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_JogFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_MaxFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_BaseFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_StartFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_FrequencyHighLowLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_FrequencyHighLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_FrequencyLowLimit(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_TorqueBoostSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_TorqueBoostInForvardDirection(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_TorqueBoostInReverseDirection(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_VFPattern(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFFrequency1(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFVoltage1(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFFrequency2(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFVoltage2(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFFrequency3(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFVoltage3(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFFrequency4(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UserVFVoltage4(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OutputVoltageAdjustments(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_EnergySavingLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_ElectronicThermalSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_ElectronicThermalLevelFor1min(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_ElectronicThermalLevelForCont(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_MotorCoolingMethod(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OverloadWarningLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OverloadWarningTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OverloadTripSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OverloadTripLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_OverloadtripTime(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_StallPreventionSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_StallPreventionLevel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_StallPreventionDurDecVolLimSel(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_SaveUpDownFrequencySelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_SaveUpDownFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UpDownModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_UpDownStepFrequency(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DrawnRunModeSelect(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);
void IG5A_F1_Set_DrawRate(modbus_t *ctx, int slaveAddress, uint16_t *value, int *status);